#include <Wire.h>
#include <Adafruit_PWMServoDriver.h>
Adafruit_PWMServoDriver pwm = Adafruit_PWMServoDriver();

#define SERVOMIN  150 // this is the 'minimum' pulse length count (out of 4096)
#define SERVOMAX  600 // this is the 'maximum' pulse length count (out of 4096)
#define SERVOMID  (SERVOMAX + SERVOMIN)/2

#define Lankle   0
#define Lknee    2
#define Lhip     1
#define Rankle   15
#define Rknee    13
#define Rhip     14

#define LankleC  SERVOMID - 10
#define LkneeC   SERVOMID + 15
#define LhipC    SERVOMID - 15
#define RankleC  SERVOMID - 20
#define RkneeC   SERVOMID - 20
#define RhipC    SERVOMID

#define Vdelay   6

const int pingPin = 7;

void rigidCalibrate(){
  pwm.setPWM(Lankle, 0, LankleC);
  pwm.setPWM(Lknee, 0, LkneeC);
  pwm.setPWM(Lhip, 0, LhipC);
  pwm.setPWM(Rankle, 0, RankleC);
  pwm.setPWM(Rknee, 0, RkneeC);
  pwm.setPWM(Rhip, 0, RhipC);
}

void setup() {
  Serial.begin(9600);
  pwm.begin();
  pwm.setPWMFreq(60);  // Analog servos run at ~60 Hz updates
  
  rigidCalibrate();
  
  
  for (uint16_t i = 0; i < 40; i++) {
    pwm.setPWM(Lankle, 0, LankleC + i);
    pwm.setPWM(Rankle, 0, RankleC + i*3);
    delay(Vdelay);
  }
  /*
  for (uint16_t i = 0; i < 15; i++) {
    pwm.setPWM(Lankle, 0, LankleC + 50 + i);
    delay(Vdelay);
  }*/
}

int stepR() {
  
  for (uint16_t i = 0; i < 30; i++) {
    pwm.setPWM(Rknee, 0, RkneeC - i);
    pwm.setPWM(Rhip, 0, RhipC - i);
    pwm.setPWM(Lknee, 0, LkneeC - i);
    pwm.setPWM(Lhip, 0, LhipC - i);
    delay(Vdelay);
  }
  /*
  for (uint16_t i = 15; i > 0; i--) {
    pwm.setPWM(Lankle, 0, LankleC + 50 + i);
    delay(Vdelay);
  }
  */
  for (uint16_t i = 30; i > 0; i--) {
    pwm.setPWM(Lankle, 0, LankleC + i);
    pwm.setPWM(Rankle, 0, RankleC + i*3);
    delay(Vdelay);
  }
  
  return getDistance();
}

int stepL(){ 
  for (uint16_t i = 0; i < 40; i++) {
    pwm.setPWM(Lankle, 0, LankleC - i*3);
    pwm.setPWM(Rankle, 0, RankleC - i);
    delay(Vdelay);
  }
  /*
  for (uint16_t i = 0; i < 5; i++) {
    pwm.setPWM(Rankle, 0, RankleC - 50 - i);
    delay(Vdelay);
  }
  */
  for (uint16_t i = 0; i < 60; i++) {
    pwm.setPWM(Rknee, 0, RkneeC - 30 + i);
    pwm.setPWM(Rhip, 0, RhipC - 30 + i);
    pwm.setPWM(Lknee, 0, LkneeC - 30 + i);
    pwm.setPWM(Lhip, 0, LhipC - 30 + i);
    delay(Vdelay);
  }
  /*
  for (uint16_t i = 0; i < 5; i++) {
    pwm.setPWM(Rankle, 0, RankleC - 50 - i);
    delay(Vdelay);
  }
  */
  for (uint16_t i = 30; i > 0; i--) {
    pwm.setPWM(Lankle, 0, LankleC - i*3);
    pwm.setPWM(Rankle, 0, RankleC - i);
    delay(Vdelay);
  }
  
  return getDistance();
  //Feet Flat
}

void followUp(){
  for (uint16_t i = 0; i < 40; i++) {
    pwm.setPWM(Lankle, 0, LankleC + i);
    pwm.setPWM(Rankle, 0, RankleC + i*3);
    delay(Vdelay);
  }
  /*
  for (uint16_t i = 0; i < 15; i++) {
    pwm.setPWM(Lankle, 0, LankleC + 50 + i);
    delay(Vdelay);
  }
  */
  for (uint16_t i = 0; i < 30; i++) {
    pwm.setPWM(Rknee, 0, RkneeC + 30 - i);
    pwm.setPWM(Rhip, 0, RhipC + 30 - i);
    pwm.setPWM(Lknee, 0, LkneeC + 30 - i);
    pwm.setPWM(Lhip, 0, LhipC + 30 - i);
    delay(Vdelay);
  }
}

long microsecondsToCentimeters(long microseconds)
{
    return microseconds / 29 / 2;
}

int getDistance(){
    long duration, inches, cm;
  
    pinMode(pingPin, OUTPUT);
    digitalWrite(pingPin, LOW);
    delayMicroseconds(2);
    digitalWrite(pingPin, HIGH);
    delayMicroseconds(5);
    digitalWrite(pingPin, LOW);
    
    pinMode(pingPin, INPUT);
    duration = pulseIn(pingPin, HIGH);
    cm = microsecondsToCentimeters(duration);
    
    Serial.print(cm);
    Serial.print("cm");
    Serial.println();
    return cm;
}

void turn(){
  for (uint16_t i = 0; i < 60; i++) {
    pwm.setPWM(Rknee, 0, RkneeC + 30 - i);
    pwm.setPWM(Rhip, 0, RhipC + 30 - i);
    pwm.setPWM(Lknee, 0, LkneeC + 30 - i);
    pwm.setPWM(Lhip, 0, LhipC + 30 - i);
    delay(Vdelay);
  }
  
  for (uint16_t i = 0; i < 50; i++) {
    pwm.setPWM(Lankle, 0, LankleC - i*3);
    pwm.setPWM(Rankle, 0, RankleC - i);
    delay(Vdelay);
  }
  /*
  for (uint16_t i = 0; i < 5; i++) {
    pwm.setPWM(Rankle, 0, RankleC - 50 - i);
    delay(Vdelay);
  }
  */
  for (uint16_t i = 0; i < 60; i++) {
    pwm.setPWM(Rknee, 0, RkneeC - 30 + i);
    pwm.setPWM(Rhip, 0, RhipC - 30 + i);
    pwm.setPWM(Lknee, 0, LkneeC - 30 + i);
    pwm.setPWM(Lhip, 0, LhipC - 30 + i);
    delay(Vdelay);
  }
  /*
  for (uint16_t i = 0; i < 5; i++) {
    pwm.setPWM(Rankle, 0, RankleC - 50 - i);
    delay(Vdelay);
  }
  */
  for (uint16_t i = 50; i > 0; i--) {
    pwm.setPWM(Lankle, 0, LankleC - i*3);
    pwm.setPWM(Rankle, 0, RankleC - i);
    delay(Vdelay);
  }
}

int blink(){
    int near = 0;
    int far = 0;
    
    Serial.println("Blinking");
    for (uint16_t i = 0; i < 100; i++) {
      pwm.setPWM(Lhip, 0, LhipC + 30 + i);
      pwm.setPWM(Rhip, 0, RhipC + 30 - i);
      delay(5);
    }
    
    Serial.print("  Near: ");
    near = getDistance();
    for (uint16_t i = 100; i > 0; i--) {
      pwm.setPWM(Lhip, 0, LhipC + 30 + i);
      pwm.setPWM(Rhip, 0, RhipC + 30 - i);
      delay(5);
    }
    
    Serial.print("  Far: ");
    far = getDistance();
    
    return (near + far)/ 2;
}

void loop() {
    int distance = 0;
    
    distance = stepR();
    distance = stepL();
    
    while(distance < 25 && distance > 10 || distance > 60 && distance < 150){
        Serial.println("Turning");
        turn();
        distance = getDistance();
    }
    
    while (distance > 330){
        distance = blink();
        Serial.print(distance);
    }
    
    followUp();
}
