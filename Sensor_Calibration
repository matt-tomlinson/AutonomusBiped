#include <Wire.h>
#include <Adafruit_PWMServoDriver.h>
Adafruit_PWMServoDriver pwm = Adafruit_PWMServoDriver();

#define SERVOMIN  150 // this is the 'minimum' pulse length count (out of 4096)
#define SERVOMAX  600 // this is the 'maximum' pulse length count (out of 4096)
#define SERVOMID  (SERVOMAX + SERVOMIN)/2

#define Lankle   0
#define Lknee    2
#define Lhip     1
#define Rankle   15
#define Rknee    13
#define Rhip     14

#define LankleC  SERVOMID - 10
#define LkneeC   SERVOMID + 15
#define LhipC    SERVOMID - 15
#define RankleC  SERVOMID - 20
#define RkneeC   SERVOMID - 20
#define RhipC    SERVOMID

#define Vdelay   5

const int pingPin = 7;

void rigidCalibrate(){
  pwm.setPWM(Lankle, 0, LankleC);
  pwm.setPWM(Lknee, 0, LkneeC);
  pwm.setPWM(Lhip, 0, LhipC);
  pwm.setPWM(Rankle, 0, RankleC);
  pwm.setPWM(Rknee, 0, RkneeC);
  pwm.setPWM(Rhip, 0, RhipC);
}

void setup() {
  Serial.begin(9600);
  pwm.begin();
  pwm.setPWMFreq(60);  // Analog servos run at ~60 Hz updates
  
  rigidCalibrate();
  
  
  
}

void loop() {
  // establish variables for duration of the ping, 
  // and the distance result in inches and centimeters:
  long duration, inches, cm;

  // The PING))) is triggered by a HIGH pulse of 2 or more microseconds.
  // Give a short LOW pulse beforehand to ensure a clean HIGH pulse:
  pinMode(pingPin, OUTPUT);
  digitalWrite(pingPin, LOW);
  delayMicroseconds(2);
  digitalWrite(pingPin, HIGH);
  delayMicroseconds(5);
  digitalWrite(pingPin, LOW);

  // The same pin is used to read the signal from the PING))): a HIGH
  // pulse whose duration is the time (in microseconds) from the sending
  // of the ping to the reception of its echo off of an object.
  pinMode(pingPin, INPUT);
  duration = pulseIn(pingPin, HIGH);

  // convert the time into a distance
  inches = microsecondsToInches(duration);
  cm = microsecondsToCentimeters(duration);
  
  Serial.print(inches);
  Serial.print("in, ");
  Serial.print(cm);
  Serial.print("cm");
  Serial.println();
  
  delay(100);
  if (cm > 10 && cm < 20) {
    for (uint16_t i = 0; i < 25; i++) {
      pwm.setPWM(Lhip, 0, LhipC + i);
      pwm.setPWM(Rhip, 0, RhipC - i);
      delay(Vdelay);
    }
    for (uint16_t i = 25; i > 0; i--) {
      pwm.setPWM(Lhip, 0, LhipC + i);
      pwm.setPWM(Rhip, 0, RhipC - i);
      delay(Vdelay);
    }
  } else if (cm < 10) {
    for (uint16_t i = 0; i < 25; i++) {
      pwm.setPWM(Rknee, 0, RkneeC - i);
      pwm.setPWM(Rhip, 0, RhipC - i);
      pwm.setPWM(Lknee, 0, LkneeC - i);
      pwm.setPWM(Lhip, 0, LhipC - i);
      delay(Vdelay);
    }
    for (uint16_t i = 25; i > 0; i--) {
      pwm.setPWM(Rknee, 0, RkneeC - i);
      pwm.setPWM(Rhip, 0, RhipC - i);
      pwm.setPWM(Lknee, 0, LkneeC - i);
      pwm.setPWM(Lhip, 0, LhipC - i);
      delay(Vdelay);
    }
  }
}

long microsecondsToInches(long microseconds)
{
  // According to Parallax's datasheet for the PING))), there are
  // 73.746 microseconds per inch (i.e. sound travels at 1130 feet per
  // second).  This gives the distance travelled by the ping, outbound
  // and return, so we divide by 2 to get the distance of the obstacle.
  // See: http://www.parallax.com/dl/docs/prod/acc/28015-PING-v1.3.pdf
  return microseconds / 74 / 2;
}

long microsecondsToCentimeters(long microseconds)
{
  // The speed of sound is 340 m/s or 29 microseconds per centimeter.
  // The ping travels out and back, so to find the distance of the
  // object we take half of the distance travelled.
  return microseconds / 29 / 2;
}
